<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qf.mapper.AddressMapper">
  <resultMap id="BaseResultMap" type="com.qf.pojo.Address">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="uid" jdbcType="INTEGER" property="uid" />
    <result column="level" jdbcType="INTEGER" property="level" />
    <result column="status" property="status" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.qf.pojo.Address">
    <result column="detail" jdbcType="LONGVARCHAR" property="detail" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, phone, uid, level,status
  </sql>
  <sql id="Blob_Column_List">
    detail
  </sql>
  <select id="selectByList" parameterType="com.qf.pojo.UINum2" resultMap="ResultMapWithBLOBs">
   select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_address
   <where>
   <if test="species!=null and title!=null and title!='' ">
   	${species} like '%${title}%'
   </if>
   <if test="species2!=null and species2!=2">
   	and status=${species2}
   </if>
   </where>
   <if test="sort!=null and order!=null">
   order by ${sort} ${order}
   </if>
   limit #{page},#{rows}
  </select>
  <select id="selectTotal" resultType="java.lang.Integer" parameterType="com.qf.pojo.UINum2">
  select count(1) from tb_address
  <where>
  <if test="species!=null and title!=null and title!=''">
  	${species} like '%${title}%'
  </if>
  <if test="species2!=null and species2!=2">
  	and status=${species2}
  </if>
  </where>
  </select>
  
  <select id="selectByUser" parameterType="com.qf.pojo.UINum2" resultMap="ResultMapWithBLOBs">
   select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_address
    <where>
    <if test="species2!=null">
    uid= ${species2}
    </if>
    </where> 
    <if test="sort!=null and order!=null">
    order by ${sort} ${order}
    </if>
    limit #{page},#{rows}
  </select>
  
  <select id="selectTotalByUser" parameterType="com.qf.pojo.UINum2" resultType="java.lang.Integer">
  select count(1) from tb_address
  <where>
  <if test="species2!=null">
  uid=${species2}
  </if>
  </where>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_address
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_address
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qf.pojo.Address">
    insert into tb_address (id, name, phone, 
      uid, level, detail
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{uid,jdbcType=INTEGER}, #{level,jdbcType=INTEGER}, #{detail,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.qf.pojo.Address">
    insert into tb_address
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="level != null">
        level,
      </if>
      <if test="detail != null">
        detail,
      </if>
      <if test="status != null">
      	status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="level != null">
        #{level,jdbcType=INTEGER},
      </if>
      <if test="detail != null">
        #{detail,jdbcType=LONGVARCHAR},
      </if>
      <if test="status!=null">
      	#{status,jdbcType=INTEGER}
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qf.pojo.Address">
    update tb_address
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="uid != null">
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="level != null">
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="detail != null">
        detail = #{detail,jdbcType=LONGVARCHAR},
      </if>
      <if test="status!=null">
      	status=#{status,jdbcType=INTEGER}
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.qf.pojo.Address">
    update tb_address
    set name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      uid = #{uid,jdbcType=INTEGER},
      level = #{level,jdbcType=INTEGER},
      detail = #{detail,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qf.pojo.Address">
    update tb_address
    set name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      uid = #{uid,jdbcType=INTEGER},
      level = #{level,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="deleteAddress" parameterType="java.util.List">
  update tb_address set status=0 
  where id in
  <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
  ${item}
  </foreach>
  </update>
  <update id="restoreAddress" parameterType="java.util.List">
  update tb_address set status=1
  where id in
  <foreach collection="list" index="index" item="item" separator="," open="(" close=")"> 
  ${item}
  </foreach>
  </update>
</mapper>